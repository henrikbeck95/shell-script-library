/// Dynamic Wallpaper Manager - DWM

fn main(WALLPAPER_THEME_DELAY: int, WALLPAPER_THEME_NAME: string) {
	var WALLPAPER_FILE_JSON: string = "/tmp/background.json";
	var WALLPAPER_FILE_LOG: string = "/tmp/wallpaper.log";
	var WALLPAPER_FILE_XML: string = "/usr/share/backgrounds/Dynamic_Wallpapers/" + WALLPAPER_THEME_NAME + ".xml";

	convert_file_from_xml_to_json(WALLPAPER_FILE_XML, WALLPAPER_FILE_JSON);

	var ARRAY_LENGTH: int = wallpaper_get_length(WALLPAPER_FILE_JSON);	
	var TIME_SECONDS_AMOUNT: float = 0;
	var TIME_SECONDS_CURRENT: int = 0;
	var TIME_DURATION: float = 0;
	var WALLPAPER_FILE_IMAGE: string;

	var i = 0;
	// var i = 7;

	while (i < ARRAY_LENGTH -1) {
		TIME_SECONDS_CURRENT = time_get_current_seconds();
		TIME_DURATION = wallpaper_get_duration(WALLPAPER_FILE_JSON, i);
		// TIME_DURATION *= 12 // Time adjustment
		TIME_SECONDS_AMOUNT += TIME_DURATION;
		WALLPAPER_FILE_IMAGE = wallpaper_get_file(WALLPAPER_FILE_JSON, i);

		/*
		// Forcing testing scenario while developing
		if (i == 7) {
			TIME_SECONDS_AMOUNT = 13970;
		}
		*/

		wallpaper_apply(WALLPAPER_FILE_IMAGE);

		message_generate_log(WALLPAPER_FILE_LOG, WALLPAPER_FILE_IMAGE, i, TIME_SECONDS_AMOUNT, TIME_SECONDS_CURRENT, TIME_DURATION);

		// Calculate when the wallpaper needs to be switched
		while (true) {
			TIME_SECONDS_CURRENT = time_get_current_seconds();
			
			// message_generate_log(WALLPAPER_FILE_LOG, WALLPAPER_FILE_IMAGE, i, TIME_SECONDS_AMOUNT, TIME_SECONDS_CURRENT, TIME_DURATION);

			if (TIME_SECONDS_CURRENT < TIME_SECONDS_AMOUNT) {
				sh {
					sleep "$%WALLPAPER_THEME_DELAY"
					# tput rc
					# tput ed
				}
			} else {
				break;
			}
		}

		process_stop_wallpaper();

		// Reset variables when all values from array get used
		if (i == ARRAY_LENGTH - 2) {
			TIME_SECONDS_AMOUNT = 0;
			i = 0;
		} else {
			i += 1;
		}
	}
}

// Function status - Testing

fn process_stop_wallpaper() {
	// Stop the wallpaper process
	sh {
		kill $!
	}
}

// Function status - Working

fn convert_file_from_xml_to_json(FILE_XML: string, FILE_JSON: string) {
	sh {
		cat "$%FILE_XML" | xq . > "$%FILE_JSON"
	}
}

fn message_generate_log(WALLPAPER_FILE_LOG: string, WALLPAPER_FILE_IMAGE: string, INDEX: int, TIME_SECONDS_AMOUNT: float, TIME_SECONDS_CURRENT: int, TIME_DURATION: float) {
	var TIME_DATE_CURRENT: string = @date();

	sh {
		echo -e "
		$%TIME_DATE_CURRENT
		Index:\t\t\t\t\t$%INDEX
		File wallpaper image:\t\t\t$%WALLPAPER_FILE_IMAGE
		Time current seconds:\t\t\t$%TIME_SECONDS_CURRENT
		Time duration:\t\t\t\t$%TIME_DURATION
		Time amount:\t\t\t\t$%TIME_SECONDS_AMOUNT
		---***---***---***---***---***---***---***---" >> "$%WALLPAPER_FILE_LOG"
	}
}

fn time_get_current_seconds(): int {
	var TIME_SECONDS: int;
	var TIME_TOTAL: int = 86400;
	
	sh {
		# %TIME_SECONDS="$(TZ='America/Sao_Paulo' date +%%s)"
		%TIME_SECONDS="$(date +%%s)"
	}

	return TIME_SECONDS % TIME_TOTAL;
}

fn wallpaper_get_duration(WALLPAPER_JSON: string, INDEX: int): float {
	var TIME_DURATION: int;

	sh {
		# cat "$WALLPAPER_FILE_JSON" | jq -r '[.background.static[$i].duration]'
		%TIME_DURATION=$(cat "$%WALLPAPER_JSON" | jq -r "[.background.static[$%INDEX].duration] | .[]")
	}

	return TIME_DURATION;
}

fn wallpaper_get_file(WALLPAPER_FILE_JSON: string, INDEX: int): string {
	var WALLPAPER_FILE_IMAGE: string;

	sh {
		# cat "$WALLPAPER_FILE_JSON" | jq -r "[.background.static[$i].file]"
		# cat "$WALLPAPER_FILE_JSON" | jq -r "[.background.static[$i].file] | .[]"
		%WALLPAPER_FILE_IMAGE=$(cat "$%WALLPAPER_FILE_JSON" | jq -r "[.background.static[$%INDEX].file] | .[]")
	}

	return WALLPAPER_FILE_IMAGE;
}

fn wallpaper_get_length(WALLPAPER_FILE_JSON: string): int {
	var ARRAY_LENGTH: int;

	sh {
		%ARRAY_LENGTH=$(cat "$%WALLPAPER_FILE_JSON" | jq -r '[.background.static[].file]' | jq length)
	}

	return ARRAY_LENGTH;
}

fn wallpaper_apply(WALLPAPER_FILE_IMAGE: string) {
	sh {
		# swaybg -m fill -i /usr/share/backgrounds/Dynamic_Wallpapers/BigSur/Big\ macOS\ Sur-1.jpg
		# swaybg -m fill -i /usr/share/backgrounds/Dynamic_Wallpapers/BigSur.xml
		# swaybg -m fill -i "$%WALLPAPER_FILE_IMAGE" & sleep 3 ; kill $!
		# your-cmd & sleep 30 ; kill $!
		echo "TESTING"
		swaybg -m fill -i "$%WALLPAPER_FILE_IMAGE" &
	}
}

// main(1, "BigSur");
main(10, "BigSur");

/*
//var files = @"*.txt"
//assert(typeof(files) == '[]string')
//println(files.join(''))
*/