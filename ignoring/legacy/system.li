/*
 * This module is dedicated to use system commands including
 * hardware level, firmware, kernel and operating system commands.
 * This module also makes redundance verifications to provide
 * security managing for path directory, files, symbolic links
 * and permission values.
*/

module system{
    module command{
        fn has_command(COMMAND: string): bool {
            var code: int

            sh {
                #command -v "$SOFTWARE_NAME" >/dev/null
                type $%COMMAND > /dev/null 2>&1
                %code=$?
            }

            pwsh {
                get-command $%COMMAND > /dev/null 2>&1

                if ($?) {
                    %code = 0
                } else {
                    %code = 1
                }
            }

            return code == 0
        }

        fn require_command(COMMAND: string) {
            if has_command(COMMAND) {
                return
            }

            required_command_not_found(COMMAND)
        }

        fn required_command_not_found(COMMAND: string) {
            eprintln("$COMMAND: command not found")
            exit(127)
        }
    }

    module os {
        module user{
            module default{
                fn create(USERNAME: string, FULL_NAME: string){
                    if system::os::user::info::has_root_previledges() == true {
                        sh {
                            #--skel
                            #-m, --create-home
                            #adduser -g "${%FULL_NAME}" $"${%USERNAME}" || useradd -c "${%FULL_NAME}" "${%USERNAME}"
                            #adduser -g "${%FULL_NAME}" $"${%USERNAME}" || useradd --comment "${%FULL_NAME}" "${%USERNAME}"
                            
                            adduser -g "${%FULL_NAME}" $"${%USERNAME}" || useradd -m -c "${%FULL_NAME}" "${%USERNAME}"

                            #Create a new user and already adding him to the wheel group
                            #adduser $MY_USERNAME wheel
                            #useradd -mG wheel "$PERFIL_ACCOUNT_USER_NAME"
                            #visudo
                        }
                    }
                }
                
                fn remove(USERNAME: string){
                    if system::os::user::info::has_root_previledges() == true {
                        sh {
                            deluser --remove-home "${%USERNAME}" || \
                                userdel -r "${%USERNAME}"
                        }
                    }
                }
            }

            /*
            module history{
                fn ash(USERNAME: string){
                    sh { cat /dev/null > $HOME/.ash_history }
                }

                fn bash(USERNAME: string){
                    sh { cat /dev/null > $HOME/.bash_history }
                }

                fn fish(USERNAME: string){
                    sh { cat /dev/null > $HOME/.local/share/fish/fish_history }
                }

                fn zsh(USERNAME: string){
                    sh { cat /dev/null > $HOME/.zhistory }
                    sh { cat /dev/null > $HOME/.zsh_history }
                }
            }
            */

            module info{
                fn exit_if_does_not_have_root_previledges() {
                    if ! system::os::user::info::has_root_previledges() {
                        eprintln("You must be ROOT for preduring this step")
                        exit(127)
                    }
                }

                fn get_all(): string {
                    var KERNEL_NAME: string = system::kernel::info::get_name()

                    if KERNEL_NAME == "linux" {
                        //The /etc/passwd file stores the details of users that are present on Linux.
                        //cut -d ":" -f 1 /etc/passwd
                        return @awk('-F', ":", '{print $1}', "/etc/passwd")
                    } else {
                        return "unknown"
                    }
                }

                fn has_root_previledges(): bool {
                    var AUX: int = -1

                    sh {
                        %AUX="$UID"
                    }

                    if AUX == 0 {
                        return true
                    } else {
                        //You must be ROOT for preduring this step
                        return false
                    }
                }

                fn has_user(THE_USER_NAME: string): bool {
                    var AUX: string = ""

                    sh {
                        %AUX=$(awk -v word="$%THE_USER_NAME" 'BEGIN {FS = ":"} $5 == word {print $5}' /etc/passwd)
                    }

                    if AUX == "" {
                        return false
                    } else {
                        return true
                    }
                }

                fn has_username(THE_USERNAME: string): bool{
                    var AUX: string = ""

                    sh {
                        %AUX=$(awk -v word="$%THE_USERNAME" 'BEGIN {FS = ":"} $1 == word {print $1}' /etc/passwd)
                    }

                    if AUX == "" {
                        return false
                    } else {
                        return true
                    }
                }

                fn who_is_the_user(THE_USERNAME: string): string{
                    var AUX: string = ""

                    sh {
                        %AUX=$(awk -v word="$%THE_USERNAME" 'BEGIN {FS = ":"} $1 == word {print $5}' /etc/passwd)
                    }

                    return AUX
                }

                fn what_is_the_username(THE_USER_NAME: string): string{
                    var AUX: string = ""

                    sh {
                        %AUX=$(awk -v word="$%THE_USER_NAME" 'BEGIN {FS = ":"} $5 == word {print $1}' /etc/passwd)
                    }

                    return AUX
                }
            }

            module password{
                //@annotation_must_be_fixed
                fn user_current(PASSWORD: string){
                    var USERNAME: string = ""

                    sh {
                        %USERNAME=$(whoami)
                    }

                    if system::os::user::info::has_root_previledges() == true {
                        sh { (echo "${%PASSWORD}" ; echo "${%PASSWORD}") | passwd "${%USERNAME}" }
                    }
                }

                fn user_normal(USERNAME: string, PASSWORD: string){
                    if system::os::user::info::has_root_previledges() == true {
                        sh { (echo "${%PASSWORD}" ; echo "${%PASSWORD}") | passwd "${%USERNAME}" }
                    }
                }

                fn user_root(PASSWORD: string){
                    if system::os::user::info::has_root_previledges() == true {
                        sh { (echo "${%PASSWORD}" ; echo "${%PASSWORD}") | passwd }
                    }
                }
            }

            //@annotation_must_be_tested
            module permission{
                fn set_executable(PATH_FILE: string){
                    sh {
                        chmod +x $%PATH_FILE
                    }
                }
            }
        }

        module variable{
            module default{
                fn any(VARIABLE: string): string {
                    var AUX: string = ""

                    //inline { %AUX="$HOME" }
                    //inline { %AUX="${%VARIABLE}" }

                    #if pwsh
                        //@annotation_must_be_fixed
                        pwsh { %AUX=$(echo "${HOME}") }
                    #else
                        sh { %AUX=$(eval echo "\$$(echo $%VARIABLE)") }
                    #endif
                    
                    return AUX
                }
            }

            module global{
                fn display(): string {
                    return system::os::variable::default::any("DISPLAY")
                }

                fn euid(): int {
                    return system::os::variable::default::any("EUID") as int
                }

                fn home(): string {
                    return system::os::variable::default::any("HOME")
                }

                fn lang(): string {
                    return system::os::variable::default::any("LANG")
                }

                fn root(): string {
                    var AUX: string = ""

                    #if pwsh
                        AUX = ""
                        //pwsh { %AUX=$(echo "${HOME}") }
                    #else
                        AUX = "/"
                        //sh { %AUX=$(echo "${HOME}") }
                    #endif

                    return AUX
                }

                fn session_manager(): string {
                    return system::os::variable::default::any("SESSION_MANAGER")
                }

                fn shell(): string {
                    return system::os::variable::default::any("SHELL")
                }

                fn term(): string {
                    return system::os::variable::default::any("TERM")
                }

                fn term_program(): string {
                    return system::os::variable::default::any("TERM_PROGRAM")
                }

                fn term_program_version(): string {
                    return system::os::variable::default::any("TERM_PROGRAM_VERSION")
                }

                fn uid(): int {
                    return system::os::variable::default::any("UID") as int
                }

                fn user(): string {
                    return system::os::variable::default::any("USER")
                }

                fn xauthority(): string {
                    return system::os::variable::default::any("XAUTHORITY")
                }

                fn xdg_current_desktop(): string {
                    return system::os::variable::default::any("XDG_CURRENT_DESKTOP")
                }

                fn xdg_data_dirs(): string {
                    return system::os::variable::default::any("XDG_DATA_DIRS")
                }

                fn xdg_greeter_data_dir(): string {
                    return system::os::variable::default::any("XDG_GREETER_DATA_DIR")
                }

                fn xdg_menu_prefix(): string {
                    return system::os::variable::default::any("XDG_MENU_PREFIX")
                }

                fn xdg_runtime_dir(): string {
                    return system::os::variable::default::any("XDG_RUNTIME_DIR")
                }

                fn xdg_seat_path(): string {
                    return system::os::variable::default::any("XDG_SEAT_PATH")
                }

                fn xdg_session_class(): string {
                    return system::os::variable::default::any("XDG_SESSION_CLASS")
                }

                fn xdg_session_desktop(): string {
                    return system::os::variable::default::any("XDG_SESSION_DESKTOP")
                }

                fn xdg_session_path(): string {
                    return system::os::variable::default::any("XDG_SESSION_PATH")
                }

                fn xdg_session_type(): string {
                    return system::os::variable::default::any("XDG_SESSION_TYPE")
                }
            }

            module path{
                //@annotation_must_be_improved by verifying if value exists on $PATH variable
                module binary{
                    fn global(): string {
                        if system::os::user::info::has_root_previledges() == true {
                            if system::platform::darwin::is_darwin() == true {
                                return null as string
                            } else if system::platform::linux::is_linux() == true {
                                return "/usr/bin"
                            } else if system::platform::nt::is_nt() == true {
                                return null as string
                            } else {
                                return null as string
                            }
                        } else {
                            var AUX: string = system::os::variable::global::home()

                            if system::platform::darwin::is_darwin() == true {
                                return null as string
                            } else if system::platform::linux::is_linux() == true {
                                return "${AUX}/.bin"
                            } else if system::platform::nt::is_nt() == true {
                                return null as string
                            } else {
                                return null as string
                            }
                        }
                    }

                    fn local(): string {
                        if system::os::user::info::has_root_previledges() == true {
                            if system::platform::darwin::is_darwin() == true {
                                return null as string
                            } else if system::platform::linux::is_linux() == true {
                                return "/usr/local/bin"
                            } else if system::platform::nt::is_nt() == true {
                                return null as string
                            } else {
                                return null as string
                            }
                        } else {
                            var AUX: string = system::os::variable::global::home()

                            if system::platform::darwin::is_darwin() == true {
                                return null as string
                            } else if system::platform::linux::is_linux() == true {
                                return "${AUX}/.local/bin"
                            } else if system::platform::nt::is_nt() == true {
                                return null as string
                            } else {
                                return null as string
                            }
                        }
                    }

                    fn skel(): string {
                        if system::platform::darwin::is_darwin() == true {
                            return null as string
                        } else if system::platform::linux::is_linux() == true {
                            return "/etc/skel"
                        } else if system::platform::nt::is_nt() == true {
                            return null as string
                        } else {
                            return null as string
                        }
                    }
                }

                module configuration{
                    fn global(): string {
                        if system::os::user::info::has_root_previledges() == true {
                            if system::platform::darwin::is_darwin() == true {
                                return null as string
                            } else if system::platform::linux::is_linux() == true {
                                return "/etc"
                                //return "/usr/share/"
                            } else if system::platform::nt::is_nt() == true {
                                return null as string
                            } else {
                                return null as string
                            }
                        } else {
                            var AUX: string = system::os::variable::global::home()

                            if system::platform::darwin::is_darwin() == true {
                                return null as string
                            } else if system::platform::linux::is_linux() == true {
                                return "${AUX}"
                            } else if system::platform::nt::is_nt() == true {
                                return null as string
                            } else {
                                return null as string
                            }
                        }
                    }

                    fn local(): string {
                        if system::os::user::info::has_root_previledges() == true {
                            if system::platform::darwin::is_darwin() == true {
                                return null as string
                            } else if system::platform::linux::is_linux() == true {
                                return "/root/.config"
                            } else if system::platform::nt::is_nt() == true {
                                return null as string
                            } else {
                                return null as string
                            }
                        } else {
                            var AUX: string = system::os::variable::global::home()

                            if system::platform::darwin::is_darwin() == true {
                                return null as string
                            } else if system::platform::linux::is_linux() == true {
                                return "${AUX}/.config"
                            } else if system::platform::nt::is_nt() == true {
                                return null as string
                            } else {
                                return null as string
                            }
                        }
                    }

                    fn skel(): string {
                        if system::platform::darwin::is_darwin() == true {
                            return null as string
                        } else if system::platform::linux::is_linux() == true {
                            return "/etc/skel/.config"
                        } else if system::platform::nt::is_nt() == true {
                            return null as string
                        } else {
                            return null as string
                        }
                    }
                }
            }

            module user{
                /*
                fn editor(): string {
                    return system::os::variable::default::any("EDITOR")
                }

                fn fpath(): string {
                    return system::os::variable::default::any("FPATH")
                }

                fn gid(): string {
                    return system::os::variable::default::any("GID")
                }

                fn host(): string {
                    return system::os::variable::default::any("HOST")
                }

                fn java_home(): string {
                    return system::os::variable::default::any("JAVA_HOME")
                }

                fn jdk_home(): string {
                    return system::os::variable::default::any("JDK_HOME")
                }
                */
            }
        }
    }
}