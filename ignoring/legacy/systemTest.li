require '../libs/core_system.li'

module test_system{
    module command{
        assert(system::command::has_command("curl") == true)
        assert(system::command::has_command("wget") == true)
        assert(system::command::has_command("anything") == false)
    }
    
    module hardware{
        module battery{
            module level{
                //assert(system::hardware::battery::level::get_current() == -1)
                //assert(system::hardware::battery::level::get_percentage() == "This device is not a laptop!")
                //assert(system::hardware::battery::level::get_status() == "This device is not a laptop!")
                //assert(system::hardware::battery::level::is_full() == false)
                //assert(system::hardware::battery::level::is_low() == false)
            }

            module plug{
                //assert(system::hardware::battery::plug::is_connected() == true)
            }

            module time{
                assert(system::hardware::battery::time::remaining() == "This device is not a laptop!")
            }
        }

        module device{
            //assert(system::hardware::device::check() == "desktop")
            //assert(system::hardware::device::is_laptop() == false)
            //assert(system::hardware::device::is_desktop() == true)
        }

        module firmware{
            //system::hardware::firmware::check() //uefi
            //system::hardware::firmware::is_bios() //false
            //system::hardware::firmware::is_uefi() //true
        }

        module processor{
            //assert(system::hardware::processor::check_family() == "GenuineIntel")
            //assert(system::hardware::processor::is_intel() == true)
        }
        
        module virtualization{
            //assert(system::hardware::virtualization::is_enabled() == true)
        }
    }
    
    module kernel{
        module info{
            //assert(system::kernel::info::get_name() == "linux")
            //assert(system::kernel::info::get_version() == "5.15.49-1-MANJARO")
        }
    }

    module os{
        //MUST BE TESTED BETTER
        module directory{
            //sh { printf "Before:\t" ; pwd }
            //system::os::directory::change_go_to("/usr/local/bin")
            //sh { printf "Inside:\t" ; pwd }
            //system::os::directory::change_go_back()
            //sh { printf "Return:\t" ; pwd }

            //system::os::directory::create("/tmp/shsl/testing")
            //system::os::directory::create_parent("/tmp/shsl/testing")
            
            //assert(system::os::directory::has_folder("/home/") == true)
            //assert(system::os::directory::has_folder("/house/") == false)
            //assert(system::os::directory::get_current_path() == "/home/henrikbeck95/Downloads/shell_script_library")




            //system::os::directory::get_current_name() == "shell_script_library"

            var TEST_PATH: string = "/tmp/shsl/testing.sh"
            //var TEST_PATH: string = "/tmp/shsl/testing/"
            
            assert(system::os::directory::get_parent_name(TEST_PATH) == "shsl")
            assert(system::os::directory::get_parent_path(TEST_PATH) == "/tmp/shsl")

            //
            //system::os::directory::create("/tmp/shsl/testing")
            //system::os::directory::remove("/tmp/shsl/testing")
            
            //system::os::directory::move_hard("/tmp/shsl/testing", "/tmp/shsl/testing2")
            system::os::directory::move_soft("/tmp/shsl/testing", "/tmp/shsl/testing2")
        }
        
        //MUST BE TESTED BETTER
        module file{
            //system::os::file::create("/tmp/shsl/testing2.sh")
            //system::os::file::create("/tmp/shsl/a/b/c/testing3.sh")
            
            //system::os::file::create_symbolic_link("/etc/passwd", "")
            
            var TEST_PATH: string = "/tmp/shsl/testing.sh"
            assert(system::os::file::get_name(TEST_PATH) == "testing.sh")
            assert(system::os::file::get_extension(TEST_PATH) == "sh")

            //Not passing this block
                //var FAILED_PATH: string = "/tmp/shsl/testing/"
                //system::os::file::get_name(FAILED_PATH)
                //system::os::file::get_extension(FAILED_PATH)
            
            
            //assert(system::os::file::has_file("/proc/cpuinfo") == true)

            var FILE_ORIGINAL: string = "/home/henrikbeck95/.bashrc"
            //var FILE_COPIED: string = "/tmp/.bashrc"
            var FILE_COPIED: string = "/tmp/lalala/.bashrc"

            //system::os::file::copy_aggressive()
            //system::os::file::copy_hard()
            //system::os::file::copy_soft()

            //system::os::file::copy_aggressive(FILE_ORIGINAL, FILE_COPIED) //NOT TESTED
            //system::os::file::copy_hard(FILE_ORIGINAL, FILE_COPIED)
            //system::os::file::copy_soft(FILE_ORIGINAL, FILE_COPIED)

            //system::os::file::remove(FILE_COPIED)
            
            
            
            
            
            //@annotation_must_be_tested
            //system::os::file::rename_hard(FILE_ORIGINAL, FILE_COPIED)
            //system::os::file::rename_soft(FILE_ORIGINAL, FILE_COPIED)
        }

        module group{
            //system::os::group::get_all()
        }

        module info{
            //assert(system::os::info::tag_properties("NAME") == '"Manjaro Linux"')
            //assert(system::os::info::tag_properties("ID") == "manjaro")
            //assert(system::os::info::tag_properties("ID_LIKE") == "arch")
            //assert(system::os::info::tag_properties("BUILD_ID") == "rolling")
            //assert(system::os::info::tag_properties("PRETTY_NAME") == '"Manjaro Linux"')
            //assert(system::os::info::tag_properties("ANSI_COLOR") == '"32;1;24;144;200"')
            //assert(system::os::info::tag_properties("HOME_URL") == '"https://manjaro.org/"')
            //assert(system::os::info::tag_properties("DOCUMENTATION_URL") == '"https://wiki.manjaro.org/"')
            //assert(system::os::info::tag_properties("SUPPORT_URL") == '"https://manjaro.org/"')
            //assert(system::os::info::tag_properties("BUG_REPORT_URL") == '"https://bugs.manjaro.org/"')
            //assert(system::os::info::tag_properties("LOGO") == "manjarolinux")
        }

        module init{
            module deamon{
                //system::os::init::deamon::get_daemon() == "systemd"
                //system::os::init::deamon::is_openrc() == false
                //system::os::init::deamon::is_systemd() == true
                
                //system::os::init::deamon::reload()
            }

            //@annotation_must_be_tested with root previledges
            module service{
                var SERVICE_NAME: string = "sshd"

                module check{
                    //system::os::init::service::check::status(SERVICE_NAME)
                }

                module later{
                    //system::os::init::service::later::disable(SERVICE_NAME)
                    //system::os::init::service::later::enable(SERVICE_NAME)
                }

                module now{
                    //system::os::init::service::now::disable(SERVICE_NAME)
                    //system::os::init::service::now::enable(SERVICE_NAME)
                    //system::os::init::service::now::restart(SERVICE_NAME)
                    //system::os::init::service::now::start(SERVICE_NAME)
                    //system::os::init::service::now::stop(SERVICE_NAME)
                    
                    //system::os::init::service::check::status(SERVICE_NAME)
                }
            }
        }

        module memory{
            module check{
                //system::os::memory::check::dynamic_time(2)
                //system::os::memory::check::static_ram_gigabyte()
                //assert(system::os::memory::check::static_ram_gigabyte() == "4,2Gi/7,8Gi RAM")
            }

            //@annotation_must_be_tested with ROOT
            module clear{
                //system::os::memory::clear::cache_apply(1)
                //system::os::memory::clear::cache_apply(2)
                //system::os::memory::clear::cache_apply(3)

                //system::os::memory::clear::cache_soft()
                //system::os::memory::clear::cache_moderate()
                //system::os::memory::clear::cache_aggressive()
                //system::os::memory::clear::swap()
            }
        }

        module status{
            //assert(system::os::status::birthday() == "2022-04-18 14:41:33.003707086 -0300")
        }

        module symbolic{
            /*
            var FILE_ORIGINAL: string = "/home/henrikbeck95/.bashrc"
            var FILE_COPIED: string = "/tmp/.bashrc"
            var FILE_LINKED: string = "/tmp/testing"

            println("---###--- Step 1 ---###---")

            system::os::file::copy_hard(FILE_ORIGINAL, FILE_COPIED)
            system::os::symbolic::create_hard(FILE_COPIED, FILE_LINKED)
            //system::os::symbolic::create_soft(FILE_COPIED, FILE_LINKED)
            
            assert(system::os::symbolic::is_linked(FILE_LINKED) == true)
            assert(system::os::symbolic::is_broken(FILE_LINKED) == false)

            println("---###--- Step 2 ---###---")

            system::os::file::remove(FILE_COPIED)

            assert(system::os::symbolic::is_linked(FILE_LINKED) == true)
            assert(system::os::symbolic::is_broken(FILE_LINKED) == true)

            println("---###--- Step 3 ---###---")
            
            system::os::symbolic::remove_if_broken(FILE_LINKED)
            system::os::symbolic::remove(FILE_LINKED)
            system::os::file::remove(FILE_LINKED)
            */
        }

        module user{
            var FULL_NAME: string = "Shell Script Library"
            var USERNAME: string = "shsl"

            module default{
                //system::os::user::default::create(USERNAME, FULL_NAME)
                //system::os::user::default::remove(USERNAME)
            }

            module info{
                //system::os::user::info::exit_if_does_not_have_root_previledges()
                //system::os::user::info::get_all()

                //assert(system::os::user::info::has_root_previledges() == false)

                //assert(system::os::user::info::has_user("henrikbeck9") == false)
                //assert(system::os::user::info::has_user("henrikbeck95") == false)
                //assert(system::os::user::info::has_user("Henrik beck") == false)
                //assert(system::os::user::info::has_user("Henrik Beck") == true)
                //assert(system::os::user::info::has_user("henrikbeck1995") == false)
                //assert(system::os::user::info::has_user("lalala") == false)
                //system::os::user::info::has_user(USERNAME)

                //assert(system::os::user::info::has_username("henrikbeck9") == false)
                //assert(system::os::user::info::has_username("henrikbeck95") == true)
                //assert(system::os::user::info::has_username("Henrik beck") == false)
                //assert(system::os::user::info::has_username("Henrik Beck") == false)
                //assert(system::os::user::info::has_username("henrikbeck1995") == false)
                //assert(system::os::user::info::has_username("lalala") == false)

                //assert(system::os::user::info::who_is_the_user("henrikbeck9") == "")
                //assert(system::os::user::info::who_is_the_user("henrikbeck95") == "Henrik Beck")
                //assert(system::os::user::info::who_is_the_user("Henrik beck") == "")
                //assert(system::os::user::info::who_is_the_user("Henrik Beck") == "")
                //assert(system::os::user::info::who_is_the_user("henrikbeck1995") == "")
                //assert(system::os::user::info::who_is_the_user("lalala") == "")

                //assert(system::os::user::info::what_is_the_username("henrikbeck9") == "")
                //assert(system::os::user::info::what_is_the_username("henrikbeck95") == "")
                //assert(system::os::user::info::what_is_the_username("Henrik beck") == "")
                //assert(system::os::user::info::what_is_the_username("Henrik Beck") == "henrikbeck95")
                //assert(system::os::user::info::what_is_the_username("henrikbeck1995") == "")
                //assert(system::os::user::info::what_is_the_username("lalala") == "")
            }

            module password{
                /*
                system::os::user::password::user_current(PASSWORD)
                system::os::user::password::user_normal(USERNAME, PASSWORD)
                system::os::user::password::user_root(PASSWORD)
                */
            }
        }

        module variable{
            module default{
                //assert(system::os::variable::default::any("UID") == "1000")
            }

            module global{
                /*
                assert(system::os::variable::global::display() == ":0")
                assert(system::os::variable::global::euid() == 1000)
                assert(system::os::variable::global::home() == "/home/henrikbeck95")
                assert(system::os::variable::global::lang() == "en_US.UTF-8")
                assert(system::os::variable::global::root() == "/")
                assert(system::os::variable::global::session_manager() == "local/manjaro:@/tmp/.ICE-unix/1014,unix/manjaro:/tmp/.ICE-unix/1014")
                assert(system::os::variable::global::shell() == "/usr/bin/zsh")
                assert(system::os::variable::global::term() == "xterm-256color")
                assert(system::os::variable::global::term_program() == "vscode")
                assert(system::os::variable::global::term_program_version() == "1.71.2")
                assert(system::os::variable::global::uid() == 1000)
                assert(system::os::variable::global::user() == "henrikbeck95")
                assert(system::os::variable::global::xauthority() == "/home/henrikbeck95/.Xauthority")
                assert(system::os::variable::global::xdg_current_desktop() == "GNOME")
                assert(system::os::variable::global::xdg_data_dirs() == "/home/henrikbeck95/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share:/var/lib/snapd/desktop")
                assert(system::os::variable::global::xdg_greeter_data_dir() == "/var/lib/lightdm-data/henrikbeck95")
                assert(system::os::variable::global::xdg_menu_prefix() == "gnome-")
                assert(system::os::variable::global::xdg_runtime_dir() == "/run/user/1000")
                assert(system::os::variable::global::xdg_seat_path() == "/org/freedesktop/DisplayManager/Seat0")
                assert(system::os::variable::global::xdg_session_class() == "user")
                assert(system::os::variable::global::xdg_session_desktop() == "gnome")
                assert(system::os::variable::global::xdg_session_path() == "/org/freedesktop/DisplayManager/Session0")
                assert(system::os::variable::global::xdg_session_type() == "x11")
                */
            }

            module path{
                module binary{
                    //assert(system::os::variable::path::binary::global() == "/home/henrikbeck95/.bin")
                    //assert(system::os::variable::path::binary::local() == "/home/henrikbeck95/.local/bin")
                    //assert(system::os::variable::path::binary::skel() == "/etc/skel")
                }

                module configuration{
                    //assert(system::os::variable::path::configuration::global() == "/home/henrikbeck95")
                    //assert(system::os::variable::path::configuration::local() == "/home/henrikbeck95/.config")
                    //assert(system::os::variable::path::configuration::skel() == "/etc/skel/.config")
                }
            }

            module user{
                /*
                //The reason why the following method is not working might be because there areuser variables besides system variables
                // @annotation_must_be_fixed
                system::os::variable::user::editor() // == "vim"
                system::os::variable::user::fpath() // == "/usr/local/share/zsh/site-functions:/usr/share/zsh/site-functions:/usr/share/zsh/functions/Calendar:/usr/share/zsh/functions/Chpwd:/usr/share/zsh/functions/Completion:/usr/share/zsh/functions/Completion/Base:/usr/share/zsh/functions/Completion/Linux:/usr/share/zsh/functions/Completion/Unix:/usr/share/zsh/functions/Completion/X:/usr/share/zsh/functions/Completion/Zsh:/usr/share/zsh/functions/Exceptions:/usr/share/zsh/functions/Math:/usr/share/zsh/functions/MIME:/usr/share/zsh/functions/Misc:/usr/share/zsh/functions/Newuser:/usr/share/zsh/functions/Prompts:/usr/share/zsh/functions/TCP:/usr/share/zsh/functions/VCS_Info:/usr/share/zsh/functions/VCS_Info/Backends:/usr/share/zsh/functions/Zftp:/usr/share/zsh/functions/Zle"
                system::os::variable::user::gid() // == "1000"
                system::os::variable::user::host() // == "manjaro"
                system::os::variable::user::java_home() //== "/home/henrikbeck95/.asdf/installs/java/adoptopenjdk-11.0.14+101"
                system::os::variable::user::jdk_home() //== "/home/henrikbeck95/.asdf/installs/java/adoptopenjdk-11.0.14+101"
                */
            }
        }
    }

    module platform{
        module architecture{
            //assert(system::platform::architecture::get_bits() == 64)
            //assert(system::platform::architecture::get_model() == "x86_64")
            //assert(system::platform::architecture::get_name() == "64-bits")
        }

        module bsd{}

        module darwin{
            //assert(system::platform::darwin::is_darwin() == false)
        }

        module linux{
            //assert(system::platform::linux::is_linux() == true)
        }

        module nt{
            //assert(system::platform::nt::is_nt() == false)
        }

        module solaris{}
    }
}

//system::platform::linux::get_distro()

//
//system::platform::linux::is_alpine()
//system::platform::linux::is_archlinux()
//system::platform::linux::is_debian()
//system::platform::linux::is_fedora()
//system::platform::linux::is_gentoo()
//
//system::platform::linux::is_redhat()
//system::platform::linux::is_slackware()
//system::platform::linux::is_ubuntu()