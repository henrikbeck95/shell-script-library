module trigonometry{
    /*
    //@annotation_must_be_fixed
    fn arccos(valueNumber: float): float {

        var GRADES: float = valueNumber * math::constants::pi() / 180
        var RESULT: float = (GRADES |> @awk('{printf "%g", atan2(sqrt(1-$1*$1), $1) }')) as float

        return RESULT * 180 / math::constants::pi()

        //return (valueNumber |> @awk('{printf "%g", atan2( (1.-$1^2)^0.5, $1) }')) as float //Radians
    }
    */

    /*
    //@annotation_must_be_fixed
    fn arcsin(valueNumber: float): float {
        return (valueNumber |> @awk('{printf "%g", asin($1)}')) as float
    }

    //@annotation_must_be_fixed
    fn arctan(valueNumber: float): float {
        return (valueNumber |> @awk('{printf "%g", atg($1)}')) as float
    }
    */

    /*
    function asin(x) { return atan2(x, sqrt(1-x*x)) }
    function acos(x) { return atan2(sqrt(1-x*x), x) }
    function atan(x) { return atan2(x,1) }
    */

    /*
    cotangent
    secant
    cosecant

    arccot
    arcsec
    arccsc
    */

    //fn math_atan2(){}

    //fn math_dist(){}

    //fn math_hypot(){}

    fn cos(valueNumber: float): float {
        if valueNumber % 360 == 0 {
            return 1;
        } else if valueNumber % 180 == 0 {
            return -1;
        } else if valueNumber % 90 == 0 {
            return 0;
        } else {
            return (valueNumber |> @awk('{printf "%g", cos($1 * atan2(0,-1) / 180)}')) as float;
            //return (valueNumber |> @awk('{printf "%g", cos($1 * 3.14159265 / 180)}')) as float;
        }
    }

    fn sin(valueNumber: float): float {
        if valueNumber % 180 == 0 {
            return 0;
        } else {
            return (valueNumber |> @awk('{printf "%g", sin($1 * atan2(0,-1) / 180)}')) as float;
            //return (valueNumber |> @awk('{printf "%g", sin($1 * 3.14159265 / 180)}')) as float;
        }
    }

    fn tan(valueNumber: float): float {
        if valueNumber % 90 == 0 {
            if valueNumber % 180 == 0 {
                return 0;
            } else {
                return null as float;
            }
        } else {
            return (valueNumber |> @awk('{printf "%g", sin($1 * atan2(0,-1) / 180) / cos($1 * atan2(0,-1) / 180)}')) as float;
            //return (valueNumber |> @awk('{printf "%g", sin($1 * 3.14159265 / 180) / cos($1 * 3.14159265 / 180)}')) as float;
        }
    }
}