module char {
    /// @annotation_must_be_improved
    fn charGetElementFirstFromDisplay(valueText: string): string {
        var aux: string = "";

        sh {
            %aux="${%valueText::1}"
            #%aux="${%valueText:0:1}"
        }

        return aux;
    }

    /// @annotation_must_be_improved
    fn charGetElementLastFromDisplay(valueText: string): string {
        var aux: string = "";

        sh {
            %aux="${%valueText: -1}"
        }

        return aux;
    }

    // fn charInsert...() {}

    fn charRemoveNonNumericAllFromDisplay(valueText: string): int {
        return (valueText |> @sed(r's/[^0-9]*//g')) as int;
    }

    //fn charRemoveNonNumericAllFromFile() {}

    fn charRemoveMatchAllFromDisplay(valueText: string, valueCharactersToBeRemoved: string): string {
        return (valueText |> @tr('-d', valueCharactersToBeRemoved));
    }

    fn charRemoveFirstAllFromDisplay(valueText: string): string {
        return (valueText |> @cut('-c', '2-'));
    }

    fn charRemoveLastAllFromDisplay(valueText: string): string {
        return (valueText |> @sed(r's/.$//'));
    }

    /// @annotation_must_be_improved
    fn charRemoveSpaceBlankAllFromDisplay(valueText: string): string {
        var aux: string = "";
        //var tmp: string = "";

        sh {
            #%aux=$(echo "$%valueText" | sed -s 's/[[:space:]]//g')
            #%aux=$(echo "$%valueText" | sed -s 's/[[:blank:]]//g')
            #%aux=$(echo "$%valueText" | sed -s 's/ //g')

            #sed 's/ //g' input.txt > output.txt
            #sed 's/[[:blank:]]//g' input.txt > output.txt
            #sed 's/[[:space:]]//g' input.txt > output.txt

            #sed -i "s/ //g" file

            tmp=$%valueText ; %aux="${tmp//[[:space:]]/}" ; unset tmp
        }

        return aux;
    }

    //fn charRemoveSpaceBlankAllFromFile() {}

    fn charReplaceCaseAllFromUpperToLowerFromDisplay(valueTextContent: string): string {
        return (valueTextContent |> @sed(r's/[A-Z]/\L&/g'));
    }

    fn charReplaceCaseAllFromLowerToUpperFromDisplay(valueTextContent: string): string {
        return (valueTextContent |> @sed(r's/[a-z]/\U&/g'));
    }

    fn charReplaceSlashAllFromForwardToBackwardFromDisplay(valueText: string): string {
        return (valueText |> @sed(r's/\//\\/g'));
    }

    fn charReplaceSlashAllFromBackwardToForwardFromDisplay(valueText: string): string {
        return (valueText |> @sed(r's/\\/\//g'));
    }    

    fn charReplaceSpaceAllFromColonToSpaceFromDisplay(valueText: string): string {
        return (valueText |> @sed(r's/:\|-/ /g;'));
    }
}