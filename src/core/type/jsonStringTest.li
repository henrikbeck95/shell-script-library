require './jsonString.li'

module jsonStringTest {
    fn main() {
        var jsonStringEmpty: string = "";
        var jsonStringNumber: string = '[1, 2, 3, 5, 8, 13, 21, 34, 55, 89]';
        var jsonStringString: string = '[ "a", "b", "c" ]';
        var jsonStringMixed: string = '["Shell Script Library", 30, true, 3.14, "ShSL"]';

        testingjsonStringEmpty(jsonStringEmpty);
        testingjsonStringNumber(jsonStringNumber);
        testingjsonStringString(jsonStringString);
        testingjsonStringMixed(jsonStringMixed);
    }

    fn testingjsonStringEmpty(jsonStringValue: string) {
        var jsonStringCustom: string = jsonString::create(jsonStringValue);

        assert(jsonStringCustom == "[]");
        assert(jsonString::push(jsonStringCustom, 'ShSL') == '["ShSL"]');
    }

    fn testingjsonStringNumber(jsonStringValue: string) {
        var jsonStringCustom: string = jsonString::create(jsonStringValue);
        var jsonStringSize: int = jsonString::length(jsonStringCustom);

        assert(jsonStringSize == 10);

        assert(jsonString::getElementFromIndex(jsonStringCustom, -1) == 89 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 0) == 1 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 1) == 2 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 2) == 3 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 3) == 5 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 4) == 8 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 5) == 13 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 6) == 21 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 7) == 34 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, jsonStringSize - 1) == 89 as string);

        assert(jsonString::update(jsonStringCustom, 0, false) == '[false,2,3,5,8,13,21,34,55,89]' as string);
        assert(jsonString::update(jsonStringCustom, 1, 14) == '[1,14,3,5,8,13,21,34,55,89]' as string);
        assert(jsonString::update(jsonStringCustom, 2, 'testing') == '[1,2,"testing",5,8,13,21,34,55,89]' as string);

        assert(jsonString::insert(jsonStringCustom, true, 0) == '[true,1,2,3,5,8,13,21,34,55,89]' as string);
        assert(jsonString::insert(jsonStringCustom, 39, 2) == '[1,2,39,3,5,8,13,21,34,55,89]' as string);
        assert(jsonString::insert(jsonStringCustom, 'testing', 1) == '[1,"testing",2,3,5,8,13,21,34,55,89]' as string);

        assert(jsonString::push(jsonStringCustom, true) == '[1,2,3,5,8,13,21,34,55,89,true]' as string);
        assert(jsonString::push(jsonStringCustom, 95) == '[1,2,3,5,8,13,21,34,55,89,95]' as string);
        assert(jsonString::push(jsonStringCustom, 'ShSL') == '[1,2,3,5,8,13,21,34,55,89,"ShSL"]' as string);
        
        assert(jsonString::delete(jsonStringCustom, -1) == '[1,2,3,5,8,13,21,34,55]' as string);
        assert(jsonString::delete(jsonStringCustom, 1) == '[1,3,5,8,13,21,34,55,89]' as string);
        assert(jsonString::delete(jsonStringCustom, 2) == '[1,2,5,8,13,21,34,55,89]' as string);
        
        assert(jsonString::pop(jsonStringCustom) == '[1,2,3,5,8,13,21,34,55]' as string);
        
        assert(jsonString::getIndexFromElement(jsonStringCustom, 8) == 4 as string);
        assert(jsonString::getIndexFromElement(jsonStringCustom, 18) == 'null' as string);
        assert(jsonString::getIndexFromElement(jsonStringCustom, 34) == 7 as string);
        
        assert(jsonString::sort(jsonStringCustom) == '[1,2,3,5,8,13,21,34,55,89]' as string);
        assert(jsonString::sortReverse(jsonStringCustom) == '[89,55,34,21,13,8,5,3,2,1]' as string);
    }

    fn testingjsonStringString(jsonStringValue: string) {
        var jsonStringCustom: string = jsonString::create(jsonStringValue);
        var jsonStringSize: int = jsonString::length(jsonStringCustom);

        assert(jsonStringSize == 3);

        assert(jsonString::getElementFromIndex(jsonStringCustom, -1) == 'c' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 0) == 'a' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 1) == 'b' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 2) == 'c' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 3) == 'null' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 4) == 'null' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 5) == 'null' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 6) == 'null' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 7) == 'null' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, jsonStringSize - 1) == 'c' as string);

        assert(jsonString::update(jsonStringCustom, 0, false) == '[false,"b","c"]' as string);
        assert(jsonString::update(jsonStringCustom, 1, 14) == '["a",14,"c"]' as string);
        assert(jsonString::update(jsonStringCustom, 2, 'testing') == '["a","b","testing"]' as string);

        assert(jsonString::insert(jsonStringCustom, true, 0) == '[true,"a","b","c"]' as string);
        assert(jsonString::insert(jsonStringCustom, 39, 2) == '["a","b",39,"c"]' as string);
        assert(jsonString::insert(jsonStringCustom, 'testing', 1) == '["a","testing","b","c"]' as string);

        assert(jsonString::push(jsonStringCustom, true) == '["a","b","c",true]' as string);
        assert(jsonString::push(jsonStringCustom, 95) == '["a","b","c",95]' as string);
        assert(jsonString::push(jsonStringCustom, 'ShSL') == '["a","b","c","ShSL"]' as string);
        
        assert(jsonString::delete(jsonStringCustom, -1) == '["a","b"]' as string);
        assert(jsonString::delete(jsonStringCustom, 1) == '["a","c"]' as string);
        assert(jsonString::delete(jsonStringCustom, 2) == '["a","b"]' as string);
        
        assert(jsonString::pop(jsonStringCustom) == '["a","b"]' as string);
        
        assert(jsonString::getIndexFromElement(jsonStringCustom, 8) == 'null' as string);
        assert(jsonString::getIndexFromElement(jsonStringCustom, 18) == 'null' as string);
        assert(jsonString::getIndexFromElement(jsonStringCustom, 34) == 'null' as string);
        
        assert(jsonString::sort(jsonStringCustom) == '["a","b","c"]' as string);
        assert(jsonString::sortReverse(jsonStringCustom) == '["c","b","a"]' as string);
    }

    fn testingjsonStringMixed(jsonStringValue: string) {
        var jsonStringCustom: string = jsonString::create(jsonStringValue);
        var jsonStringSize: int = jsonString::length(jsonStringCustom);

        assert(jsonStringSize == 5);

        assert(jsonString::getElementFromIndex(jsonStringCustom, -1) == 'ShSL' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 0) == 'Shell Script Library' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 1) == 30 as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 2) == true as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 3) == 3.14 as string);        
        assert(jsonString::getElementFromIndex(jsonStringCustom, 4) == 'ShSL' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 5) == 'null' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 6) == 'null' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, 7) == 'null' as string);
        assert(jsonString::getElementFromIndex(jsonStringCustom, jsonStringSize - 1) == 'ShSL' as string);

        assert(jsonString::update(jsonStringCustom, 0, false) == '[false,30,true,3.14,"ShSL"]' as string);
        assert(jsonString::update(jsonStringCustom, 1, 14) == '["Shell Script Library",14,true,3.14,"ShSL"]' as string);
        assert(jsonString::update(jsonStringCustom, 2, 'testing') == '["Shell Script Library",30,"testing",3.14,"ShSL"]' as string);

        assert(jsonString::insert(jsonStringCustom, true, 0) == '[true,"Shell Script Library",30,true,3.14,"ShSL"]' as string);
        assert(jsonString::insert(jsonStringCustom, 39, 2) == '["Shell Script Library",30,39,true,3.14,"ShSL"]' as string);
        assert(jsonString::insert(jsonStringCustom, 'testing', 1) == '["Shell Script Library","testing",30,true,3.14,"ShSL"]' as string);

        assert(jsonString::push(jsonStringCustom, true) == '["Shell Script Library",30,true,3.14,"ShSL",true]' as string);
        assert(jsonString::push(jsonStringCustom, 95) == '["Shell Script Library",30,true,3.14,"ShSL",95]' as string);
        assert(jsonString::push(jsonStringCustom, 'ShSL') == '["Shell Script Library",30,true,3.14,"ShSL","ShSL"]' as string);
        
        assert(jsonString::delete(jsonStringCustom, -1) == '["Shell Script Library",30,true,3.14]' as string);
        assert(jsonString::delete(jsonStringCustom, 1) == '["Shell Script Library",true,3.14,"ShSL"]' as string);
        assert(jsonString::delete(jsonStringCustom, 2) == '["Shell Script Library",30,3.14,"ShSL"]' as string);
        
        assert(jsonString::pop(jsonStringCustom) == '["Shell Script Library",30,true,3.14]' as string);
        
        assert(jsonString::getIndexFromElement(jsonStringCustom, 8) == 'null' as string);
        assert(jsonString::getIndexFromElement(jsonStringCustom, 18) == 'null' as string);
        assert(jsonString::getIndexFromElement(jsonStringCustom, 34) == 'null' as string);
        
        assert(jsonString::sort(jsonStringCustom) == '[true,3.14,30,"ShSL","Shell Script Library"]' as string);
        assert(jsonString::sortReverse(jsonStringCustom) == '["Shell Script Library","ShSL",30,3.14,true]' as string);
    }
}

jsonStringTest::main();
