// cURL, wGET
module http {
    //fn connect(){}
    
    //fn delete() {}

    fn get(URL_LINK: string): string {
        /*
        #case $(utils_check_if_internet_connection_exists) in
        #	"false") RESULT="false" ;;
        #	"true")
        #		;;
        #esac
        */

        #if pwsh
            pwsh {
                try {
                    return (invoke-webrequest %URL_LINK -headers @{Accept = '*/*'}).Content
                } catch {
                    [Console]::Error.WriteLine('http error')
                    exit 1
                }
            }
        #else
            if system::command::has_command('curl') {
                sh {
                    curl -sSL --fail "$%URL_LINK" 2> '/dev/null' || {
                        echo 'http error' >&2
                        exit 1
                    }

                    # {
                    #    curl -sSL --fail "$%URL_LINK" 2> '/dev/null' && return 0
                    #} || {
                    #    echo 'http error' >&2 && return 1
                    #}
                }
            } else if system::command::has_command('wget') {
                sh {
                    wget -q -O - --header 'Accept: */*' "$%URL_LINK" 2> '/dev/null' || {
                        echo 'http error' >&2
                        exit 1
                    }
                }
            } else {
                system::command::required_command_not_found('curl')
            }
        #endif
    }

    //fn head(){}

    fn isOnline(): bool {
        var AUX: int = 0
        var COMMAND: string = ""

        if system::command::has_command("nc") == true {
            COMMAND = "'GET http://google.com HTTP/1.0\n\n' | nc google.com 80 > /dev/null 2>&1"
        } else if system::command::has_command("curl") == true {
            COMMAND = "curl --silent https://archlinux.org > /dev/null"
        } else if system::command::has_command("wget") == true {
            COMMAND = "wget --quiet https://archlinux.org -O /dev/null"
        }

        //curl http://ip-api.com/line?fields=status //Return: success
        
        //else if system::command::has_command("nm-tool") == true {
            //COMMAND = "nm-tool|grep State|cut -f2 -d' '"
        //}

        //if [ "$('GET http://google.com HTTP/1.0\n\n' | nc google.com 80 > /dev/null 2>&1)" -eq 0 ]; then
        //if [ $(nm-tool|grep State|cut -f2 -d' ') == "connected" ]; then

        if COMMAND != "" {
            sh {
                #echo "$%COMMAND"
                eval $%COMMAND && %AUX=1
            }
        }

        if AUX == 1 {
            return true
        } else {
            return false
        }
    }

    /// Mobile (cellular/smartphone) internet connection
    fn isMobile(): bool {
        return internet::request::get_url_content("http://ip-api.com/line?fields=mobile") as bool
    }

    /// Proxy, VPN or Tor exit address 
    fn isProxy(): any {
        return internet::request::get_url_content("http://ip-api.com/line?fields=proxy") as bool
    }

    //fn options(){}
    
    fn post(REQUEST_BODY: string, REQUEST_HEADER: string, REQUEST_URL: string): string{
        var AUX: string = ""

        sh {
            %AUX=$(curl --silent -i -H"$%REQUEST_HEADER" -d"$%REQUEST_BODY" "$%REQUEST_URL" | tail -1)
        }

        return AUX
    }
    
    //fn put() {}

    fn statusCode(URL_LINK: string): int {
        var AUX: int = 0

        sh {
            %AUX=$(curl --write-out %%{http_code} --silent --output /dev/null ${%URL_LINK})
        }

        return AUX
    }

    //fn trace(){}

    //fn update() {}
}