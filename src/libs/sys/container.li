module container {
    /// Container - Containers

    fn defaultContainerList(containerEngine: string) {
        sh { "${%containerEngine}" container ls }
    }

    fn defaultContainerExecute(containerEngine: string, containerName: string, pathShell: string) {
        sh { "${%containerEngine}" exec -it "${%containerName}" "${%pathShell}" }
    }

    fn defaultContainerRun(containerEngine: string, containerName: string, pathShell: string) {
        sh { "${%containerEngine}" run -it "${%containerName}" "${%pathShell}" }
    }

    fn defaultContainerStop(containerEngine: string, containerName: string) {
        sh { "${%containerEngine}" container stop "${%containerName}" }
    }

    /// Container - Images

    fn defaultImageBackup(containerEngine: string, imageName: string, imageVersion: string, pathDestiny: string) {
        sh { "${%containerEngine}" save -o ${%pathDestiny}/${%imageName}.tgz ${%imageName}:${%imageVersion} }
    }

    fn defaultImageDownload(containerEngine: string, imageName: string) {
        sh { "${%containerEngine}" pull "${%imageName}" }
    }

    /*fn defaultImageExport(containerEngine: string, CONTAINER_NAME: string) {
      sh { "${%containerEngine}" export "${%CONTAINER_NAME}" > "${%CONTAINER_NAME.tar}" }
    }
    */

    fn defaultImageList(containerEngine: string) {
        sh { "${%containerEngine}" image ls }
    }

    fn defaultImageRemove(containerEngine: string, imageName: string) {
        sh { "${%containerEngine}" image rm "${%imageName}" }
    }

    fn distroboxImageDownload(imageName: string, imageVersion: string) {
        sh { distrobox-create --name "${%imageName}" --image "${%imageVersion}" }
    }

    fn distroboxImageEnter(imageName: string, imageVersion: string) {
        sh { distrobox-enter --name "${%imageName}" }
    }

    //fn distroboxImageRemove(imageName: string, imageVersion: string) {}
}
